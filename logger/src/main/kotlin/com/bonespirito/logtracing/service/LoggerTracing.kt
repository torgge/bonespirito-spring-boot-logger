/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.bonespirito.logtracing.service

import com.bonespirito.logtracing.configuration.ConfigurationUUIDProperties
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.context.properties.EnableConfigurationProperties
import org.springframework.http.HttpHeaders.CONTENT_TYPE
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.stereotype.Service
import org.springframework.web.reactive.function.client.WebClient
import org.springframework.web.reactive.function.client.bodyToMono
import reactor.core.publisher.Mono

@Service
@EnableConfigurationProperties(ConfigurationUUIDProperties::class)
class LoggerTracing(
    @Autowired
    private val properties: ConfigurationUUIDProperties
) {

    private val logger: Logger = LoggerFactory.getLogger(LoggerTracing::class.java)

    fun getUUID(): List<String> {
        val webClient = WebClient.builder()
            .baseUrl(properties.uri)
            .defaultHeader(CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
            .build()

        val mono: Mono<List<String>> = webClient.get().exchangeToMono { response ->
            if (response.statusCode() == HttpStatus.OK) {
                response.bodyToMono<List<String>>()
            } else {
                Mono.just(listOf("Error response"))
            }
        }

        logger.info(
            "\n\n Current property: token: ${properties.token} \n" +
                "\n\n Current property: prefix: ${properties.prefix} \n" +
                "\n\n Current property: uri: ${properties.uri} \n" +
                "\n\n UUID: ${mono.block()} \n"
        )

        val result = mono.block()?.map { "${properties.prefix}$it" } ?: listOf()

        logger.info("Was generate an UUID from ${properties.uri} \n this value is ${result[0]}")

        return result
    }

    fun someLibraryMethod(): Boolean {
        val l = LoggerFactory.getLogger(LoggerTracing::class.java)
        l.info("properties: $properties")
        return true
    }
}
